diff --git a/fiona/ogrext2.pxd b/fiona/ogrext2.pxd
index f3579f9..6b727c0 100644
--- a/fiona/ogrext2.pxd
+++ b/fiona/ogrext2.pxd
@@ -125,6 +125,9 @@ cdef extern from "ogr_api.h":
     void    OGR_F_Destroy (void *feature)
     long    OGR_F_GetFID (void *feature)
     int     OGR_F_IsFieldSet (void *feature, int n)
+    IF GDAL_VERSION_NUM >= 2020000:
+        int     OGR_F_IsFieldNull (void *feature, int n)
+
     int     OGR_F_GetFieldAsDateTime (void *feature, int n, int *y, int *m, int *d, int *h, int *m, int *s, int *z)
     double  OGR_F_GetFieldAsDouble (void *feature, int n)
     int     OGR_F_GetFieldAsInteger (void *feature, int n)
diff --git a/fiona/ogrext2.pyx b/fiona/ogrext2.pyx
index ed28dca..4ab47fe 100644
--- a/fiona/ogrext2.pyx
+++ b/fiona/ogrext2.pyx
@@ -34,6 +34,10 @@ from libc.string cimport strcmp
 
 
 log = logging.getLogger("Fiona")
+class NullHandler(logging.Handler):
+    def emit(self, record):
+        pass
+log.addHandler(NullHandler())
 
 # Mapping of OGR integer field types to Fiona field type names.
 #
@@ -135,6 +139,13 @@ def get_gdal_release_name():
     return ogrext2.GDALVersionInfo("RELEASE_NAME")
 
 
+# check compiled version against runtime version
+# only compare the major and minor version number
+GDAL_RUNTIME_VERSION = get_gdal_version_num()
+if GDAL_VERSION_NUM // 1000 != GDAL_RUNTIME_VERSION // 1000:
+    log.warning("Fiona was compiled against GDAL {} but run with GDAL {}".format(GDAL_VERSION_NUM, GDAL_RUNTIME_VERSION))
+
+
 # Feature extension classes and functions follow.
 
 cdef class FeatureBuilder:
@@ -157,6 +168,7 @@ cdef class FeatureBuilder:
         cdef int tz = 0
         cdef int retval
         cdef const char *key_c = NULL
+        cdef bint is_null
         props = OrderedDict()
         for i in range(ogrext2.OGR_F_GetFieldCount(feature)):
             fdefn = ogrext2.OGR_F_GetFieldDefnRef(feature, i)
@@ -177,7 +189,13 @@ cdef class FeatureBuilder:
 
             # TODO: other types
             fieldtype = FIELD_TYPES_MAP[fieldtypename]
+            is_null = False
+            IF GDAL_VERSION_NUM >= 2020000:
+                if ogrext2.OGR_F_IsFieldNull(feature, i):
+                    is_null = True
             if not ogrext2.OGR_F_IsFieldSet(feature, i):
+                is_null =True
+            if is_null:
                 props[key] = None
             elif fieldtype is int:
                 props[key] = ogrext2.OGR_F_GetFieldAsInteger64(feature, i)
diff --git a/setup.py b/setup.py
index f794f60..1eaabc5 100644
--- a/setup.py
+++ b/setup.py
@@ -47,6 +47,11 @@ with open('fiona/__init__.py', 'r') as f:
             version = version.strip("'")
             break
 
+def calc_gdal_version_num(maj=1, min=0, rev=0):
+    return int(maj * 1000000 + min * 10000 + rev*100)
+# libgdal env var is set by conda-build 3 as part of what's in our conda_build_config.yaml
+GDAL_VERSION_NUM = calc_gdal_version_num(*[int(i) for i in os.getenv('libgdal', '').split(".")])
+
 # Fiona's auxiliary files are UTF-8 encoded and we'll specify this when
 # reading with Python 3+
 open_kwds = {}
@@ -198,7 +203,8 @@ if source_is_repo and "clean" not in sys.argv:
         Extension('fiona._crs', ['fiona/_crs.pyx'], **ext_options),
         Extension('fiona._drivers', ['fiona/_drivers.pyx'], **ext_options),
         Extension('fiona._err', ['fiona/_err.pyx'], **ext_options),
-        Extension('fiona.ogrext', ['fiona/ogrext.pyx'], **ext_options)])
+        Extension('fiona.ogrext', ['fiona/ogrext.pyx'], **ext_options)],
+        compile_time_env={"GDAL_VERSION_NUM": GDAL_VERSION_NUM},)
 
 # If there's no manifest template, as in an sdist, we just specify .c files.
 elif "clean" not in sys.argv:
